#!/usr/bin/python

"""

  					      Voluntary Distributed Storage Kit
						----------------------------
					           Download/Upload client

"""

import os,sys,re,socket
from optparse import OptionParser
from core.helpers import convert_bytes
from downup.manager import CmdLineManager
from downup.server import Server,ServerIOError
from storage.user import User

socket.setdefaulttimeout(30.0)

VERSION = '1.2.3'


class Options(OptionParser):
	"""
	Command-line option parser (using optparse)
	"""
	def __init__(self):
		OptionParser.__init__(self, usage="usage: %prog [options] [URL | FILE]")
		self.add_option('-l','--list-servers',action="store_true",dest='listserv',help="List saved servers URL")
		self.add_option('-a','--add-server',action="store",metavar='SERVER',dest='addserv',help="Add an existing server")
		self.add_option('-r','--rm-server',action="store",metavar='SERVER',dest='delserv',help="Remove an existing server")
		self.add_option('-p','--publish',action="store",metavar='SERVER',dest='pubserv',help="Publish an existing server")
		self.add_option('-w','--write',action="store",dest='dest_dir',metavar='DIRECTORY',help="Set destination directory",default='')
		self.add_option('-s','--size',action="store_true",dest="getsize",help="Displays distributed storage capacity")
		self.add_option('-v','--version',action="store_true",dest="showver",help="Show version")
		self.add_option('-u','--update',action="store_true",dest="update",help="Update servers")


class Vodstok:
	"""
	Vodstok client.
	"""
	def __init__(self):
		# read user's endpoint list
		self.db = User.getInstance().getServersDB()



	#
	#	Servers management
	#

	def listServers(self):
		"""
		Displays every storage server declared
		"""
		i = 0
		for server in self.db.enum():
			print '-> %s' % server
			i += 1
		print '%d registered server(s)' % i
		
	def addServer(self, server):
		"""
		Add a server to the servers database
		"""
		self.db.add(server)
		return
		
	def removeServer(self, server):
		"""
		Remove a server from the servers database
		"""
		self.db.remove(server)
		return

	def publishServer(self, server):
		"""
		Publish a given server on every other servers
		"""
		for e in self.db.enum():
			if e.url!=server:
				sys.stdout.write('- publishing on %s ... ' % e.url)
				if e.publish(server):
					sys.stdout.write('ok\n')
				else:
					sys.stdout.write('ko\n')

	def testServer(self, url):
		return Server(url).check()

	def updateServers(self):
		"""
		Publish a given server on every other servers
		"""
		for e in self.db.enum():
			servers = e.listRegisteredEndpoints()
			for s in servers:
				if s.check():
					self.db.add(s.url)

		print '[i] Propagating servers URLs ...'
		self.servers = None
		for s in self.db.enum():
			ep = self.db.pickRandom()
			try:
				ep.publish(s.url)
			except ServerIOError:
				pass
		print '[i] Done.'
		
	def getRandomServer(self, filesize):
		return self.db.pickRandom()
	
	def isVdsUrl(self, url):
		"""
		Check wether the provided URL is a Vodstok URL or not
		"""
		return (re.match('^(http|https)://([^\?]+)\?(.*)$', url) is not None)

	def getGlobalCapacity(self):
		"""
		Computes the overall storage capacity (based on every servers declared)
		"""
		total_chunks = 0
		total_used = 0
		total_quota = 0
		i = 1
		for server in self.db.enum():
			sys.stdout.write('\r[+] Computing global capacity ...%0.2f%%' % (float(i)*100/len(self.db)))
			sys.stdout.flush()
			res = server.capacity()
			if res:
				quota,used,chunks,usage = res
				total_chunks += chunks
				total_used += used
				total_quota += quota
			i+=1
		sys.stdout.write('\n')
		return (total_quota, total_used, total_chunks)


#
#	Vodstok Main
#

if __name__ == '__main__':
	a = Vodstok()
	(options,args) = Options().parse_args()
	if options.listserv:
		a.listServers()
	elif options.addserv:
		print '[i] Testing remote server ...'
		if a.testServer(options.addserv):
			print '[i] Registering server %s' % options.addserv
			a.addServer(options.addserv)
		else:
			print '[!] Server does not seem to work properly.'
	elif options.delserv:
		print '[i] Removing server ...'
		a.removeServer(options.delserv)
	elif options.pubserv:
		print '[i] Publishing server ...'
		a.publishServer(options.pubserv)
	elif options.update:
		print '[i] Updating servers ...'
		a.updateServers()
	elif options.getsize:
		quota,used,chunks = a.getGlobalCapacity()
		print ''
		print 'Statistics:'
		print ''
		print '- Global storage space   : %s' % convert_bytes(quota)
		print '- Used storage space     : %s' % convert_bytes(used)
		print '- # of chunks            : %d' % chunks
	elif options.showver:
		print 'Vodstok version %s - virtualabs.fr' % VERSION		
	elif len(args)>=1 :
		manager = CmdLineManager()
		if a.isVdsUrl(args[0]):
			manager.download(args[0], options.dest_dir)
		else:		
			manager.upload(args[0])
	else:
		Options().print_help()	
#!/usr/bin/python

"""

  					      Voluntary Distributed Storage Kit
						----------------------------
					           Download/Upload client

"""

import os,sys,re,socket
from optparse import OptionParser
from core.helpers import convert_bytes
from downup.manager import CmdLineManager
from downup.server import Server,ServerIOError
from storage.user import User

socket.setdefaulttimeout(30.0)

VERSION = '1.2.0'

class NoSuitableEndpoint(Exception):
	"""
	Exception raised when no suitable endpoint are found
	"""
	def __init__(self):
		Exception.__init__(self)

class Options(OptionParser):
	"""
	Command-line option parser (using optparse)
	"""
	def __init__(self):
		OptionParser.__init__(self, usage="usage: %prog [options] [VDS URL]")
		self.add_option('-l','--list-endpoints',action="store_true",dest='listep',help="List saved endpoints")
		self.add_option('-a','--add-endpoint',action="store",metavar='ENDPOINT',dest='addep',help="Add an existing endpoint")
		self.add_option('-r','--del-endpoint',action="store",metavar='ENDPOINT',dest='delep',help="Remove an existing endpoint")
		self.add_option('-p','--publish',action="store",metavar='ENDPOINT',dest='pubep',help="Publish an existing endpoint")
		self.add_option('-w','--write',action="store",dest='dest_dir',metavar='DIRECTORY',help="Set destination directory",default='')
		self.add_option('-s','--size',action="store_true",dest="getsize",help="Displays distributed storage capacity")
		self.add_option('-v','--version',action="store_true",dest="showver",help="Show version")
		self.add_option('-u','--update',action="store_true",dest="update",help="Update endpoints")


class Vodstok:
	"""
	Vodstok client. This class uses endpoints (via core.client.VodstokStorage).
	"""
	def __init__(self):
		# read user's endpoint list
		self.db = User.getInstance().getServersDB()



	#
	#	Endpoints management
	#

	def listEndpoints(self):
		"""
		Displays every storage endpoint declared
		"""
		i = 0
		for endpoint in self.db.enum():
			print '-> %s' % endpoint
			i += 1
		print '%d endpoint(s) referenced' % i
		
	def addEndpoint(self, endpoint):
		"""
		Add an endpoint to the endpoints database
		"""
		self.db.add(endpoint)
		return
		
	def removeEndpoint(self, endpoint):
		"""
		Remove an endpoint from the endpoints database
		"""
		self.db.remove(endpoint)
		return

	def publishEndpoint(self, endpoint):
		"""
		Publish a given endpoint on every other endpoints
		"""
		for e in self.db.enum():
			if e.url!=endpoint:
				sys.stdout.write('- publishing on %s ... ' % e.url)
				if e.publish(endpoint):
					sys.stdout.write('ok\n')
				else:
					sys.stdout.write('ko\n')

	def testEndpoint(self, url):
		return Server(url).check()

	def updateEndpoints(self):
		"""
		Publish a given endpoint on every other endpoints
		"""
		for e in self.db.enum():
			endpoints = e.listRegisteredEndpoints()
			for ep in endpoints:
				if ep.check():
					self.db.add(ep.url)

		print '[i] Propagating endpoints ...'
		self.endpoints = None
		for e in self.db.enum():
			ep = self.db.pickRandom()
			try:
				ep.publish(e.url)
			except ServerIOError:
				pass
		print '[i] Done.'
		
	def getRandomEndpoint(self, filesize):
		return self.db.pickRandom()
	
	def isVdsUrl(self, url):
		"""
		Check wether the provided URL is a Vodstok URL or not
		"""
		return (re.match('^(http|https)://([^@]+)@([^#]+)#(.*)$', url) is not None)

	def getGlobalCapacity(self):
		"""
		Computes the overall storage capacity (based on every endpoints declared)
		"""
		total_chunks = 0
		total_used = 0
		total_quota = 0
		i = 1
		for endpoint in self.db.enum():
			sys.stdout.write('\r[+] Computing global capacity ...%0.2f%%' % (float(i)*100/len(self.db)))
			sys.stdout.flush()
			res = endpoint.capacity()
			if res:
				quota,used,chunks = res
				total_chunks += chunks
				total_used += used
				total_quota += quota
			i+=1
		sys.stdout.write('\n')
		return (total_quota, total_used, total_chunks)


#
#	Vodstok Main
#

if __name__ == '__main__':
	a = Vodstok()
	(options,args) = Options().parse_args()
	if options.listep:
		a.listEndpoints()
	elif options.addep:
		print '[i] Testing remote endpoint ...'
		if a.testEndpoint(options.addep):
			print '[i] Registering endpoint %s' % options.addep
			a.addEndpoint(options.addep)
		else:
			print '[!] Endpoint does not seem to work properly.'
	elif options.delep:
		print '[i] Removing endpoint ...'
		a.removeEndpoint(options.delep)
	elif options.pubep:
		print '[i] Publishing endpoint ...'
		a.publishEndpoint(options.pubep)
	elif options.update:
		print '[i] Updating endpoints ...'
		a.updateEndpoints()
	elif options.getsize:
		quota,used,chunks = a.getGlobalCapacity()
		print ''
		print 'Statistics:'
		print ''
		print '- Global storage space   : %s' % convert_bytes(quota)
		print '- Used storage space     : %s' % convert_bytes(used)
		print '- # of chunks            : %d' % chunks
	elif options.showver:
		print 'Vodstok version %s - virtualabs.fr' % VERSION		
	elif len(args)>=1 :
		manager = CmdLineManager()
		if a.isVdsUrl(args[0]):
			print '[i] Starting download ...'
			manager.download(args[0], options.dest_dir)
		else:		
			print '[i] Starting upload ...'
			manager.upload(args[0])
	else:
		Options().print_help()	